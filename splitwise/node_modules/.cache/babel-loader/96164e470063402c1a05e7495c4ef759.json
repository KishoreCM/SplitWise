{"ast":null,"code":"class AddGroup {\n  constructor() {\n    this.users = JSON.parse(localStorage.getItem(\"signedInUsers\"));\n    this.loggedInUser = sessionStorage.getItem(\"LoggedInUser\");\n    this.getCurrentUserData = this.users.filter(user => user.email === this.loggedInUser);\n    this.currentUserGrpData = JSON.stringify(this.getCurrentUserData[0].groups);\n  }\n\n  getUserName() {\n    return sessionStorage.getItem(\"LoggedInUser\");\n  }\n\n  createGroup(group, callback) {\n    this();\n    let anyGroup = JSON.parse(this.currentUserGrpData);\n\n    if (anyGroup[0]) {\n      //anyGroup = JSON.parse(anyGroup);\n      anyGroup.push(group);\n    } else {\n      anyGroup = [];\n      anyGroup.push(group);\n    } //localStorage.setItem(\"Groups\", JSON.stringify(anyGroup));\n    //console.log(this.users);\n\n\n    for (let i = 0; i < this.users.length; i++) {\n      if (this.users[i].email === this.loggedInUser) {\n        this.users[i].groups = anyGroup;\n        break;\n      }\n    }\n\n    localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n    sessionStorage.setItem(\"current_grp_switch\", group.group_name);\n    callback();\n  }\n\n  getGroups() {\n    //return localStorage.getItem(\"Groups\");\n    //this.users = JSON.parse(localStorage.getItem(\"signedInUsers\"));\n    //this.loggedInUser = sessionStorage.getItem(\"LoggedInUser\");\n\n    /*this.getCurrentUserData = this.users.filter(\n      user => user.email === this.loggedInUser\n    );*/\n    //this.currentUserGrpData = JSON.stringify(this.getCurrentUserData[0].groups);\n    //console.log(this.currentUserGrpData);\n    this();\n    return this.currentUserGrpData;\n  }\n\n  setAddExpense(updated_data, callback) {\n    let currentData = JSON.parse(this.getGroups());\n\n    for (let i = 0; i < currentData.length; i++) {\n      if (currentData[i].group_name === updated_data.group_name) {\n        currentData[i].friends_name = updated_data.friends_name;\n        currentData[i].owed = updated_data.owed;\n        currentData[i].expenses = updated_data.expenses; //localStorage.setItem(\"Groups\", JSON.stringify(currentData));\n\n        for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i].email === this.loggedInUser) {\n            this.users[i].groups = currentData;\n            break;\n          }\n        }\n\n        localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n      }\n    }\n\n    callback();\n  }\n\n  getCurrentGrpSwitch() {\n    this();\n    let groupsData = JSON.parse(this.currentUserGrpData); //if (groupsData === null) return false;\n\n    let currentGrpName = sessionStorage.getItem(\"current_grp_switch\");\n\n    if (currentGrpName) {\n      let grp = groupsData.filter(g => g.group_name === currentGrpName);\n      return grp[0];\n    }\n\n    return groupsData[0];\n  }\n\n  setCurrentGrpSwitch(group_name) {\n    sessionStorage.setItem(\"current_grp_switch\", group_name);\n  }\n\n  deleteGrpExpense(totalOwed, grpFriends, currentExpense, grpExpense, id, callback) {\n    this();\n    let grps = JSON.parse(this.currentUserGrpData);\n    let uptExpLen = 0;\n\n    for (let i = 0; i < grps.length; i++) {\n      if (grps[i].group_name === grpExpense.group_name) {\n        grps[i].owed = totalOwed;\n        grps[i].friends_name = grpFriends;\n        let updatedExpenses = grpExpense.expenses.filter((expense, index) => expense[\"expense_\" + index] !== currentExpense[\"expense_\" + id]);\n        uptExpLen = updatedExpenses.length;\n        let refineUpdatedExpense = [];\n        let idxI = 0;\n        let idxJ = 0;\n        let exp = {};\n\n        while (idxI < uptExpLen) {\n          if (updatedExpenses[idxI][\"expense_\" + idxJ] !== undefined) {\n            exp[\"expense_\" + idxI] = updatedExpenses[idxI][\"expense_\" + idxJ];\n            exp[\"youPaid_\" + idxI] = updatedExpenses[idxI][\"youPaid_\" + idxJ];\n            exp[\"youLent_\" + idxI] = updatedExpenses[idxI][\"youLent_\" + idxJ];\n            exp[\"onMonth\"] = updatedExpenses[idxI][\"onMonth\"];\n            exp[\"onDate\"] = updatedExpenses[idxI][\"onDate\"];\n            idxI++;\n            refineUpdatedExpense.push(exp);\n            exp = {};\n          }\n\n          idxJ++;\n        }\n\n        grps[i].expenses = refineUpdatedExpense;\n        break;\n      }\n    } //localStorage.setItem(\"Groups\", JSON.stringify(grps));\n\n\n    for (let i = 0; i < this.users.length; i++) {\n      if (this.users[i].email === this.loggedInUser) {\n        this.users[i].groups = grps;\n        break;\n      }\n    }\n\n    localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n    callback();\n  }\n\n}\n\nexport default new AddGroup();","map":{"version":3,"sources":["/home/system8/Desktop/MyFirstReactApp/splitwise-app/src/addgroupcontroller.js"],"names":["AddGroup","constructor","users","JSON","parse","localStorage","getItem","loggedInUser","sessionStorage","getCurrentUserData","filter","user","email","currentUserGrpData","stringify","groups","getUserName","createGroup","group","callback","anyGroup","push","i","length","setItem","group_name","getGroups","setAddExpense","updated_data","currentData","friends_name","owed","expenses","getCurrentGrpSwitch","groupsData","currentGrpName","grp","g","setCurrentGrpSwitch","deleteGrpExpense","totalOwed","grpFriends","currentExpense","grpExpense","id","grps","uptExpLen","updatedExpenses","expense","index","refineUpdatedExpense","idxI","idxJ","exp","undefined"],"mappings":"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","sourcesContent":["class AddGroup {\n  constructor() {\n    this.users = JSON.parse(localStorage.getItem(\"signedInUsers\"));\n    this.loggedInUser = sessionStorage.getItem(\"LoggedInUser\");\n    this.getCurrentUserData = this.users.filter(\n      user => user.email === this.loggedInUser\n    );\n    this.currentUserGrpData = JSON.stringify(this.getCurrentUserData[0].groups);\n  }\n\n  getUserName() {\n    return sessionStorage.getItem(\"LoggedInUser\");\n  }\n\n  createGroup(group, callback) {\n    this();\n    let anyGroup = JSON.parse(this.currentUserGrpData);\n    if (anyGroup[0]) {\n      //anyGroup = JSON.parse(anyGroup);\n      anyGroup.push(group);\n    } else {\n      anyGroup = [];\n      anyGroup.push(group);\n    }\n    //localStorage.setItem(\"Groups\", JSON.stringify(anyGroup));\n    //console.log(this.users);\n    for (let i = 0; i < this.users.length; i++) {\n      if (this.users[i].email === this.loggedInUser) {\n        this.users[i].groups = anyGroup;\n        break;\n      }\n    }\n\n    localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n    sessionStorage.setItem(\"current_grp_switch\", group.group_name);\n    callback();\n  }\n\n  getGroups() {\n    //return localStorage.getItem(\"Groups\");\n    //this.users = JSON.parse(localStorage.getItem(\"signedInUsers\"));\n    //this.loggedInUser = sessionStorage.getItem(\"LoggedInUser\");\n    /*this.getCurrentUserData = this.users.filter(\n      user => user.email === this.loggedInUser\n    );*/\n    //this.currentUserGrpData = JSON.stringify(this.getCurrentUserData[0].groups);\n    //console.log(this.currentUserGrpData);\n    this();\n    return this.currentUserGrpData;\n  }\n\n  setAddExpense(updated_data, callback) {\n    let currentData = JSON.parse(this.getGroups());\n\n    for (let i = 0; i < currentData.length; i++) {\n      if (currentData[i].group_name === updated_data.group_name) {\n        currentData[i].friends_name = updated_data.friends_name;\n        currentData[i].owed = updated_data.owed;\n        currentData[i].expenses = updated_data.expenses;\n        //localStorage.setItem(\"Groups\", JSON.stringify(currentData));\n        for (let i = 0; i < this.users.length; i++) {\n          if (this.users[i].email === this.loggedInUser) {\n            this.users[i].groups = currentData;\n            break;\n          }\n        }\n        localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n      }\n    }\n    callback();\n  }\n\n  getCurrentGrpSwitch() {\n    this();\n    let groupsData = JSON.parse(this.currentUserGrpData);\n    //if (groupsData === null) return false;\n    let currentGrpName = sessionStorage.getItem(\"current_grp_switch\");\n    if (currentGrpName) {\n      let grp = groupsData.filter(g => g.group_name === currentGrpName);\n      return grp[0];\n    }\n    return groupsData[0];\n  }\n\n  setCurrentGrpSwitch(group_name) {\n    sessionStorage.setItem(\"current_grp_switch\", group_name);\n  }\n\n  deleteGrpExpense(\n    totalOwed,\n    grpFriends,\n    currentExpense,\n    grpExpense,\n    id,\n    callback\n  ) {\n    this();\n    let grps = JSON.parse(this.currentUserGrpData);\n    let uptExpLen = 0;\n\n    for (let i = 0; i < grps.length; i++) {\n      if (grps[i].group_name === grpExpense.group_name) {\n        grps[i].owed = totalOwed;\n        grps[i].friends_name = grpFriends;\n        let updatedExpenses = grpExpense.expenses.filter(\n          (expense, index) =>\n            expense[\"expense_\" + index] !== currentExpense[\"expense_\" + id]\n        );\n\n        uptExpLen = updatedExpenses.length;\n        let refineUpdatedExpense = [];\n        let idxI = 0;\n        let idxJ = 0;\n        let exp = {};\n        while (idxI < uptExpLen) {\n          if (updatedExpenses[idxI][\"expense_\" + idxJ] !== undefined) {\n            exp[\"expense_\" + idxI] = updatedExpenses[idxI][\"expense_\" + idxJ];\n            exp[\"youPaid_\" + idxI] = updatedExpenses[idxI][\"youPaid_\" + idxJ];\n            exp[\"youLent_\" + idxI] = updatedExpenses[idxI][\"youLent_\" + idxJ];\n            exp[\"onMonth\"] = updatedExpenses[idxI][\"onMonth\"];\n            exp[\"onDate\"] = updatedExpenses[idxI][\"onDate\"];\n            idxI++;\n            refineUpdatedExpense.push(exp);\n            exp = {};\n          }\n          idxJ++;\n        }\n\n        grps[i].expenses = refineUpdatedExpense;\n        break;\n      }\n    }\n    //localStorage.setItem(\"Groups\", JSON.stringify(grps));\n    for (let i = 0; i < this.users.length; i++) {\n      if (this.users[i].email === this.loggedInUser) {\n        this.users[i].groups = grps;\n        break;\n      }\n    }\n\n    localStorage.setItem(\"signedInUsers\", JSON.stringify(this.users));\n\n    callback();\n  }\n}\n\nexport default new AddGroup();\n"]},"metadata":{},"sourceType":"module"}